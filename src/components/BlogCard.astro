---
import { Image } from "astro:assets";
import type { CollectionEntry } from "astro:content";

type BlogPost = CollectionEntry<"blog">["data"] & { slug: string };

const { title, description, publishDate, category, tags, slug, coverImage, coverImageAlt } = Astro.props as BlogPost;

const formatDate = (date: Date) => {
    return date.toLocaleDateString("en-US", {
        year: "numeric",
        month: "long",
        day: "numeric",
    });
};
---

<article class="bg-white rounded-2xl overflow-hidden border border-gray-200 shadow-sm transition-all duration-300 ease-in-out hover:border-gray-300 hover:shadow-lg hover:-translate-y-1">
    <a href={`/blog/${slug}`} class="block no-underline text-inherit group">
        {coverImage && (
            <div class="aspect-[16/9] overflow-hidden">
                <Image
                    src={coverImage}
                    alt={coverImageAlt ?? title}
                    class="w-full h-full object-cover transition-transform duration-500 ease-in-out group-hover:scale-[1.05]"
                    loading="lazy"
                    decoding="async"
                    format="webp"
                    quality="mid"
                />
            </div>
        )}
        
        <div class="p-8">
            <div class="flex items-center gap-4 mb-4">
                <span class={`inline-block px-3 py-1 rounded-full text-sm font-medium ${
                    category === 'Professional' 
                        ? 'bg-accent-100 text-accent-700' 
                        : 'bg-gray-100 text-gray-700'
                }`}>
                    {category}
                </span>
                
                <time datetime={publishDate.toISOString()} class="text-sm text-gray-500">
                    {formatDate(publishDate)}
                </time>
            </div>
            
            <h2 class="text-2xl font-light text-gray-900 mb-4 leading-snug tracking-tight group-hover:text-accent-700 transition-colors">
                {title}
            </h2>
            
            <p class="text-lg font-light leading-relaxed text-gray-600 mb-6">
                {description}
            </p>
            
            {tags.length > 0 && (
                <div class="flex flex-wrap gap-2 mb-6">
                    {tags.map((tag) => (
                        <span class="text-sm text-gray-500 bg-gray-50 px-2 py-1 rounded">
                            {tag}
                        </span>
                    ))}
                </div>
            )}
            
            <div class="inline-flex items-center gap-2 text-accent-600 font-medium hover:text-accent-700 transition-colors group/link">
                <span class="text-sm tracking-wide uppercase">
                    Read More
                </span>
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="transition-transform group-hover/link:translate-x-1">
                    <path d="M5 12h14"/>
                    <path d="m12 5 7 7-7 7"/>
                </svg>
            </div>
        </div>
    </a>
</article>