---
import { getCollection, getEntry } from "astro:content";
import { Image } from "astro:assets";
import BaseLayout from "../../layouts/BaseLayout.astro";
import MarkdownRenderer from "../../components/MarkdownRenderer.astro";
import { render } from "astro:content";

export async function getStaticPaths() {
    const blogPosts = await getCollection("blog");
    return blogPosts.map((post) => ({
        params: { slug: post.slug },
        props: { post },
    }));
}

const { post } = Astro.props;
const { Content } = await render(post);

const formatDate = (date: Date) => {
    return date.toLocaleDateString("en-US", {
        year: "numeric",
        month: "long",
        day: "numeric",
    });
};
---

<BaseLayout title={post.data.title} description={post.data.description}>
    <article class="container section-padding-block">
        <div class="max-w-4xl mx-auto">
            <header class="text-center mb-12">
                <h1 class="text-4xl sm:text-5xl font-light tracking-tight text-gray-900 mb-6 leading-tight">
                    {post.data.title}
                </h1>
                
                <p class="text-xl font-light leading-relaxed text-gray-600 max-w-3xl mx-auto mb-8">
                    {post.data.description}
                </p>
                
                <div class="flex flex-wrap justify-center items-center gap-4 text-sm mb-6">
                    <time datetime={post.data.publishDate.toISOString()} class="text-gray-500">
                        {formatDate(post.data.publishDate)}
                    </time>
                    
                    {post.data.tags.length > 0 && (
                        <>
                            <span class="w-1 h-1 bg-gray-300 rounded-full"></span>
                            <div class="flex flex-wrap gap-2">
                                {post.data.tags.map((tag, index) => (
                                    <span class={`text-sm font-medium py-2 px-3 rounded-full transition-colors ${
                                        index === 0 
                                            ? "text-accent-700 bg-accent-100" 
                                            : "text-gray-600 bg-gray-100"
                                    }`}>
                                        {tag}
                                    </span>
                                ))}
                            </div>
                        </>
                    )}
                </div>
            </header>
            
            {post.data.coverImage && (
                <div class="mb-12">
                    <Image
                        src={post.data.coverImage}
                        alt={post.data.coverImageAlt ?? post.data.title}
                        class="w-full h-auto max-h-[600px] object-contain rounded-2xl shadow-sm"
                        loading="eager"
                        decoding="async"
                        format="webp"
                        quality="mid"
                    />
                </div>
            )}
            
            <MarkdownRenderer>
                <Content />
            </MarkdownRenderer>
        </div>
    </article>
</BaseLayout>